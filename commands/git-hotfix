#!/bin/bash
# shellcheck disable=SC2063,SC2129,SC2181,SC2162
# Usage:
# git hotfix create|c [name]
# git hotfix finish|f [name]

# Set default subcommand
CMD=${1:-create}

# make sure the aliases trigger the right
# subcommand
case "$CMD" in
    s)
        CMD='create'
        ;;

    f)
        CMD='finish'
        ;;
esac

# get the settings from git config
BRANCHPREFIX=$(git config --get webflow.prefix.hotfix)
BRANCHFROM=$(git config --get webflow.branch.next)
BRANCHRELEASE=$(git config --get webflow.branch.main)
HOTFIXNAME=$2
BRANCH="${BRANCHPREFIX}$HOTFIXNAME"

# make sure the 'next' branch exists
# use the 'main' branch as a fallback
if ! git rev-parse --quiet --verify "$BRANCHFROM"; then
    BRANCHFROM=$BRANCHRELEASE
fi

# tests for a clean state
WORKINGDIRDIRTY=$(git status --porcelain)
BRANCHEXISTS=$(git rev-parse --quiet --verify "$BRANCH")
CURRENTBRANCH=$(git branch | grep \* | cut -d ' ' -f2)

# Help function showing usage of the command
usage() {
    echo -e "Usage:\ngit hotfix create|c [name]"
    echo -e "git hotfix finish|f [name]\n"
}

# merges hotfix branch into develop.
function finishHotfix {

    # assume current branch is a hotfix/ branch
    #  if no hotfix name is given
    if [ -z "$HOTFIXNAME" ]; then

        # use current branch as the target
        BRANCH=$CURRENTBRANCH

        # extract hotfix name from hotfix/[name] branch
        HOTFIXNAME=${BRANCH/"$BRANCHPREFIX"/''}

        # Make sure the branch starts with the hotfix/ prefix
        # otherwise abort and force manual usage over [name] parameter.
        if [[ ! "$BRANCH" =~ $BRANCHPREFIX ]]; then
            echo -e "\nERR: Couldn't find the right hotfix branch.\n"
            echo -e "Please give either a name like this:"
            echo -e "=> git hotfix finish menu-fixes@v1.10.0"
            echo -e "or checkout the branch you want to finish.\n"
            usage
            exit 1
        fi
    fi

    echo ""
    git checkout "$BRANCHFROM"
    git merge "$BRANCH" -m "Implement hotfix '$HOTFIXNAME'"
    git branch -d "$BRANCH"

    if [ $? -eq 0 ]; then
        echo -e "\nhotfix $HOTFIXNAME successfully implemented!\n"
    else
        echo -e "\nERR: Problems occured during implementation of hotfix $HOTFIXNAME\n"
    fi
}

# abort if the [name] is missing and show the help
if [ -z "$2" ] && [ ! "$CMD" == "finish" ] ; then
    echo -e "\nERR: Parameter missing or command not found!\n"
    usage
    exit 1
fi

# abort if working directory is dirty
if [ "$WORKINGDIRDIRTY" ] ; then
    echo -e "\nERR: Your working directory is dirty!\n"
    git status
    exit 1
fi

# the main logic handler.
case "$CMD" in
    create)
        if [ "$BRANCHEXISTS" ] ; then
            echo -e "\nERR: Branch $BRANCH already exists!\n"
            exit 1

        else
            git checkout -b "$BRANCH" "$BRANCHFROM"
        fi
        exit
        ;;

    finish)
        finishHotfix
        exit
        ;;

    *)
        usage
        exit
        ;;

esac