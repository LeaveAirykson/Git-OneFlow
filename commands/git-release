#!/bin/bash
# shellcheck disable=SC2063,SC2129,SC2181,SC2162
# Usage:
# git release create|c version
# # git release publish|p version
# # git release finish|f version
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
normal="\033[0m"


# =================================
# REQUIREMENTS
# =================================
# make sure to always pull first to correctly
# check for changes
git remote update &> /dev/null

# =================================
# DEFINE VARIABLES/DEFAULTS
# =================================

# Set default subcommand
CMD=${1:-create}

# make sure the aliases trigger the right
# subcommand
case "$CMD" in
    c)
        CMD='create'
        ;;
    p)
        CMD='publish'
        ;;
    f)
        CMD='finish'
        ;;
esac

# get the settings from git config
BRANCHPREFIX=$(git config --get nextflow.prefix.release)
BRANCHFROM=$(git config --get nextflow.branch.next)
BRANCHRELEASE=$(git config --get nextflow.branch.main)
VERSIONPREFIX=$(git config --get nextflow.prefix.version)

# make sure the 'next' branch exists
# use the 'main' branch as a fallback
if ! git rev-parse --quiet --verify "$BRANCHFROM" &> /dev/null; then
    BRANCHFROM=$BRANCHRELEASE
fi

# build final versiontag name and branch name
VERSIONNUMBER=$2
VERSIONTAG=${VERSIONPREFIX}${VERSIONNUMBER}
BRANCH="${BRANCHPREFIX}${VERSIONTAG}"

# tests for a clean state
WORKINGDIRDIRTY=$(git status --porcelain)
CURRENTBRANCH=$(git branch | grep \* | cut -d ' ' -f2)

# third parameter in release [create|publish|finish] [version] [commit]
# is used as a reference to branch off from.
BRANCHFROM=${3:-$BRANCHFROM}


# =================================
# FUNCTIONS
# =================================

# Help function showing usage of the command
usage() {
    echo -e "Usage:\ngit release create|c [version] [commit]\n"
    echo -e "git release publish|p [version]"
    echo -e "git release finish|f [version]\n"
}

# creates a release branch and optionally pushes it to the remote
function createRelease {
    # assume current branch is a release/ branch
    #  if no version number is given
    if [ -z "$VERSIONNUMBER" ]; then

        echo -e "\nERR: No release name given!\n"
        exit 1

    fi

    # checkout release/vxxx branch
    git checkout -b "$BRANCH" "$BRANCHFROM"

    echo "Make sure to publish the release if its not finished yet so others can add commits to it."
}

# pushes the branch to remote
function publishRelease {
    git push -u origin "$BRANCH"
}

# merges release branch into develop and creates
# fast forward merge into master to create release tag.
function finishRelease {

    # assume current branch is a release/ branch
    #  if no version number is given
    if [ -z "$VERSIONNUMBER" ]; then

        # use current branch as the target
        BRANCH=$CURRENTBRANCH

        # extract version tag from release/vX.X.X branch
        VERSIONTAG=${BRANCH/"$BRANCHPREFIX"/''}

        # Make sure the branch starts with the release/ prefix
        # otherwise abort and force manual usage over [version] parameter.
        if [[ ! "$BRANCH" =~ $BRANCHPREFIX ]]; then
            echo -e "\n⮕ ${red}ERR: Couldn't find the right release branch.${normal}\n"
            echo -e "Please give either a version name like this:"
            echo -e "=> git release publish v1.5.0"
            echo -e "or checkout the branch you want to finish.\n"
            usage
            exit 1
        fi
    fi

    # checkout release/vxxx branch
    git checkout "$BRANCH"

    # this will set the LASTVERSION to the last
    # annotated tag
    if git describe --abbrev=0 "$BRANCHRELEASE" &> /dev/null; then

        # get last annotated tag (= version tags)
        LASTVERSION=$(git describe --abbrev=0 "$BRANCHRELEASE");

    # use first commit as fallback if no version exists
    else
        # tell user there is no recent version
        LASTVERSION='false'
        echo "${yellow}No recent version found.${normal}"
        echo "Using full history as reference."
    fi

    echo -e "\nRelease: $BRANCH"
    echo -e "Version tag: $VERSIONTAG\n"

    # write a changelog if needed
    echo ""
    read -p "Create CHANGELOG entry (Y/n)? " autocreateChangelog

    if [ "$autocreateChangelog" == "Y" ]; then
        # autocreate changelog from git log
        createChangelogFromLog

        # ask user if he wants to edit the changelog entry
        echo -e "\n"
        read -p "Do you want to edit the entry (Y/n)? " openChangelog

        if [ "$openChangelog" == "Y" ]; then
            nano _tmp-release-note.txt
        fi

        # finalize changelog
        writeChangelog

        # add it to the release commit
        git add CHANGELOG.md
    fi

    # get tmp changelog if any
    if [ -f _tmp-release-note.txt ]; then
        RELEASENOTES="$(cat _tmp-release-note.txt)"

        # remove tmp note
        rm _tmp-release-note.txt
    else
        # use an empty release note as fallback
        RELEASENOTES=''
    fi

    # write version inside a .version file
    # and add it to the next commit
    echo "$VERSIONTAG" > .version && git add .version

    # Create final commit with updated changelog
    git commit -m "Release $VERSIONTAG" -m "$RELEASENOTES"

    # merge release/vxxx into develop
    git checkout "$BRANCHFROM"
    git merge "$BRANCH"

    # update master with release changes from develop
    git checkout "$BRANCHRELEASE"
    git merge "$BRANCHFROM" -m "Release $VERSIONTAG"

    # Create version tag on master
    git tag -a "$VERSIONTAG" "$BRANCHFROM" -m "Release $VERSIONTAG" -m "$RELEASENOTES"

    if git remote &> /dev/null; then
        # push the branches
        git push --follow-tags
    fi

    if [ $? -eq 0 ]; then
        echo -e "\n⮕ ${green}Release $VERSIONTAG successfully finished!${normal}\n"
    else
        echo -e "\n⮕ ${red}ERR: Problems occured during creation of release:${normal} $VERSIONTAG\n"
        exit 1
    fi

    # Remove release branch as its fully merged into develop
    git branch -d "$BRANCH"

    # finally check out 'next' branch so users don't accidentaly
    # continue working on the 'main' branch.
    git checkout "$BRANCHFROM" &> /dev/null
}

# Automatically prepends an entry in the CHANGELOG.md file based on
# the commit messages between the last release tag.
# Will prompt the user if they want to autocreate the entry and if they
# want to manually edit it afterwards.
function writeChangelog {

    # start version headline in tmp release message
    echo "## ${VERSIONTAG}" > _tmp-release-message.md;
    cat _tmp-release-note.txt >> _tmp-release-message.md;
    echo -e "\n" >> _tmp-release-message.md;

    # add old changelog data
    cat CHANGELOG.md >> _tmp-release-message.md;

    # overwrite changelog
    mv _tmp-release-message.md CHANGELOG.md;

    # tell user our success
    echo -e "\n⮕ ${green}Successfully added changelog entry for:${normal} $VERSIONTAG."
}

function createChangelogFromLog {
    # use full git log as reference if no version exist
    if [ "$LASTVERSION" = 'false' ]; then
        git log --pretty=format:"- %s" "$BRANCHFROM" > _tmp-release-note.txt;

    # use latest annotated tag as reference if it exists
    else
        # save log output to tmp release note
        git log --pretty=format:"- %s" "$LASTVERSION"..."$BRANCHFROM" > _tmp-release-note.txt;
    fi

    echo "Content:"
    cat _tmp-release-note.txt;
}


# =================================
# CHECKS
# =================================
# abort if working directory is dirty
if [ "$WORKINGDIRDIRTY" ] ; then
    echo -e "\nERR: Your working directory is dirty!\n"
    git status
    exit 1
fi

# make sure the branches are up to date
if git checkout "$BRANCHFROM" &> /dev/null &&
    [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then

    echo -e "\n⮕ ${red}ERR: HEAD and origin/HEAD are deviated!${normal}"
    echo -e "Make sure you merged/pulled new commits."
    echo ""
    git status
    exit 1
fi

# abort if version tag already exists
if [ "$(git tag -l "$VERSIONTAG")" ]; then
    echo -e "\n⮕ ${red}ERR: Version already exists!${normal}\n"
    git show "$VERSIONTAG"
    exit 1
fi

# =================================
# EXECUTION
# =================================
case "$CMD" in

    create)
        createRelease
        exit
        ;;

    publish)
        publishRelease
        exit
        ;;

    finish)
        finishRelease
        exit
        ;;

esac