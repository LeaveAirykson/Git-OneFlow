#!/bin/bash
# shellcheck disable=SC2063,SC2129,SC2181,SC2162
# Usage:
# git release create|c version
# # git release publish|p version
# # git release finish|f version
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
normal="\033[0m"

# =================================
# DEFINE VARIABLES/DEFAULTS
# =================================

# Set default subcommand
CMD=${1:-create}

# make sure the aliases trigger the right
# subcommand
case "$CMD" in
c | create)
    CMD='create'
    ;;
p | publish)
    CMD='publish'
    ;;
f | finish)
    CMD='finish'
    ;;
esac

# get the settings from git config
BRANCHPREFIX=$(git config --get nextflow.prefix.release)
BRANCHFROM=$(git config --get nextflow.branch.next)
BRANCHRELEASE=$(git config --get nextflow.branch.main)
VERSIONPREFIX=$(git config --get nextflow.prefix.version)
STRATEGY=$(git config --get nextflow.general.strategy)
COMPAREURL=$(git config --get nextflow.general.compareurl)
COMMITURL=$(git config --get nextflow.general.commiturl)
TMPRELEASEMSG="_tmp-release-message.md"
HASREMOTE=0

# determine if a remote exists at all
if grep 'remote' .git/config &>/dev/null; then
    HASREMOTE=1
fi

# make sure the 'next' branch exists
# use the 'main' branch as a fallback
if ! git rev-parse --quiet --verify "$BRANCHFROM" &>/dev/null; then
    BRANCHFROM=$BRANCHRELEASE
fi

# build final versiontag name and branch name
VERSIONNUMBER=$2
VERSIONTAG=${VERSIONPREFIX}${VERSIONNUMBER}
BRANCH="${BRANCHPREFIX}${VERSIONTAG}"

# tests for a clean state
WORKINGDIRDIRTY=$(git status --porcelain)
CURRENTBRANCH=$(git branch | grep \* | cut -d ' ' -f2)

# do work based on used strategy option
if [ "$STRATEGY" == "alternate" ]; then
    # this will set the LASTVERSION and CURRENTVERSION based on
    # annotated tags and data from package.json
    LASTVERSION="$(git rev-list --max-parents=0 HEAD)"
    CURRENTVERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    if git describe --abbrev=0 "$BRANCHRELEASE" &>/dev/null; then
        LASTVERSION=$(git describe --abbrev=0 "$BRANCHRELEASE")
    fi
else
    # third parameter in release [create|publish|finish] [version] [commit]
    # is used as a reference to branch off from.
    BRANCHFROM=${3:-$BRANCHFROM}
fi

# =================================
# FUNCTIONS
# =================================

# Help function showing usage of the command
usage() {
    echo -e "Usage:\ngit release create|c [version] [commit]\n"
    echo -e "git release publish|p [version]"
    echo -e "git release finish|f [version]\n"
    echo -e "With 'alternate' strategy:"
    echo -e "Usage:\ngit release create|c [version]\n"
    echo -e "git release finish|f\n"
}

# creates a release branch and optionally pushes it to the remote
function createRelease {
    # assume current branch is a release/ branch
    #  if no version number is given
    if [ -z "$VERSIONNUMBER" ]; then

        echo -e "\nERR: No release name given!\n"
        exit 1
    fi

    # make sure version does not start with tag prefix
    # but instead represents a valid semver syntax or npm version option.
    if [[ ${VERSIONNUMBER:0:1} == "$VERSIONPREFIX" ]]; then
        echo -e "\n⮕ ${red}ERR: Version starts with version tag prefix: '$VERSIONPREFIX'.${normal}"
        echo -e "\nThis is not allowed.\nUse full semver syntax like: 1.2.0"
        echo -e "Or if you use alternate strategy, any of these npm version options:\nmajor, minor, patch."
        exit 1
    fi

    case $STRATEGY in
    alternate)
        # make sure to checkout 'next' branch
        if [ ! "$CURRENTBRANCH" == "$BRANCHFROM" ]; then
            git checkout "$BRANCHFROM"
        fi

        # use npm version if package.json exists
        if [ -f package.json ]; then
            echo -e "\n${yellow}⮕${normal} Bump package version"
            VERSION=$(npm --silent --no-git-tag-version version "$VERSIONNUMBER")
            VERSIONTAG=$(echo "$VERSION" | tail -1)
        else
            # warn if npm version param is given but no package.json found
            if [[ $VERSIONNUMBER == 'major' || $VERSIONNUMBER == 'minor' || $VERSIONNUMBER == 'patch' ]]; then
                echo -e "${red}⮕ ERR: No package.json file found!${normal}"
                exit 1
            fi
        fi

        # extract version number without prefix
        VERSION=${VERSIONTAG/#$VERSIONPREFIX/}

        writeChangelogAlternate "$VERSION" &&
            echo -e "\n${green}⮕ Release $VERSION created.${normal}" &&
            echo -e "Continue with updating the CHANGELOG.md and then call:\ngit release f"
        exit 0
        ;;
    *)
        # checkout release/vxxx branch
        git checkout -b "$BRANCH" "$BRANCHFROM"

        echo "Make sure to publish the release if its not finished yet so others can add commits to it."
        ;;
    esac

}

# pushes the branch to remote
function publishRelease {
    git push -u origin "$BRANCH"
}

# merges release branch into develop and creates
# fast forward merge into master to create release tag.
function finishRelease {

    # assume current branch is a release/ branch
    #  if no version number is given
    if [ -z "$VERSIONNUMBER" ]; then

        # use current branch as the target
        BRANCH=$CURRENTBRANCH

        # extract version tag from release/vX.X.X branch
        VERSIONTAG=${BRANCH/"$BRANCHPREFIX"/''}

        # Make sure the branch starts with the release/ prefix
        # otherwise abort and force manual usage over [version] parameter.
        if [[ ! "$BRANCH" =~ $BRANCHPREFIX ]]; then
            echo -e "\n⮕ ${red}ERR: Couldn't find the right release branch.${normal}\n"
            echo -e "Please give either a version name like this:"
            echo -e "git release finish 1.5.0"
            echo -e "or checkout the branch you want to finish.\n"
            usage
            exit 1
        fi
    fi

    # checkout release/vxxx branch
    git checkout "$BRANCH"

    # this will set the LASTVERSION to the last
    # annotated tag
    if git describe --abbrev=0 "$BRANCHRELEASE" &>/dev/null; then

        # get last annotated tag (= version tags)
        LASTVERSION=$(git describe --abbrev=0 "$BRANCHRELEASE")

    # use first commit as fallback if no version exists
    else
        # tell user there is no recent version
        LASTVERSION='false'
        echo "No recent version found."
        echo "Using full history as reference."
    fi

    echo -e "\nRelease: $BRANCH"
    echo -e "Version tag: $VERSIONTAG\n"

    # write a changelog if needed
    echo ""
    read -p "Create CHANGELOG entry (Y/n)? " autocreateChangelog

    if [ "$autocreateChangelog" == "Y" ]; then
        # autocreate changelog from git log
        createChangelogFromLog

        # ask user if he wants to edit the changelog entry
        echo -e "\n"
        read -p "Do you want to edit the entry (Y/n)? " openChangelog

        if [ "$openChangelog" == "Y" ]; then
            nano _tmp-release-note.txt
        fi

        # finalize changelog
        writeChangelog

        # add it to the release commit
        git add CHANGELOG.md
    fi

    # get tmp changelog if any
    if [ -f _tmp-release-note.txt ]; then
        RELEASENOTES="$(cat _tmp-release-note.txt)"

        # remove tmp note
        rm _tmp-release-note.txt
    else
        # use an empty release note as fallback
        RELEASENOTES=''
    fi

    # write version inside a .version file
    # and add it to the next commit
    echo "$VERSIONTAG" >.version && git add .version

    # Create final commit with updated changelog
    git commit -m "Release $VERSIONTAG" -m "$RELEASENOTES"

    # merge release/vxxx into develop
    git checkout "$BRANCHFROM"
    git merge "$BRANCH"

    # update master with release changes from develop
    git checkout "$BRANCHRELEASE"
    git merge "$BRANCHFROM" -m "Release $VERSIONTAG"

    # Create version tag on master
    git tag -a "$VERSIONTAG" "$BRANCHFROM" -m "Release $VERSIONTAG" -m "$RELEASENOTES"

    if [ $HASREMOTE == 1 ]; then
        # push the branches
        git push --follow-tags
    fi

    if [ $? -eq 0 ]; then
        echo -e "\n⮕ ${green}Release $VERSIONTAG successfully finished!${normal}"
    else
        echo -e "\n⮕ ${red}ERR: Problems occured during creation of release:${normal} $VERSIONTAG"
        exit 1
    fi

    # Remove release branch as its fully merged into develop
    git branch -d "$BRANCH"

    # finally check out 'next' branch so users don't accidentaly
    # continue working on the 'main' branch.
    git checkout "$BRANCHFROM" &>/dev/null
}

# used by 'alternate' strategy.
function finishReleaseAlternate {

    # make sure to checkout 'next' branch
    if [ ! "$CURRENTBRANCH" == "$BRANCHFROM" ]; then
        git checkout "$BRANCHFROM"
    fi

    echo -e "\n${yellow}⮕${normal} Create and commit tagged release"

    # make sure everything is added
    git add --all
    git commit -m "Bump version to ${CURRENTVERSION}"
    git checkout "$BRANCHRELEASE"
    git merge --no-ff "$BRANCHFROM" -m "Release ${CURRENTVERSION}"
    git tag -a "${VERSIONPREFIX}${CURRENTVERSION}" -m "Release ${CURRENTVERSION}"

    # push if remote exists
    if [ $HASREMOTE == 1 ]; then
        echo -e "\n${yellow}⮕${normal} Push release"
        git push --follow-tags
    fi

    # show success message if everything went well
    if [ $? -eq 0 ]; then
        echo -e "\n${green}⮕${normal} Release ${CURRENTVERSION} finished!"
    else
        echo -e "\n⮕ ${red}ERR: Problems occured during creation of release:${normal} $CURRENTVERSION"
        exit 1
    fi

    # finally check out 'next' branch so users don't
    # continue working on the 'main' branch.
    git checkout "$BRANCHFROM" &>/dev/null
}

# Automatically prepends an entry in the CHANGELOG.md file based on
# the commit messages between the last release tag.
# Will prompt the user if they want to autocreate the entry and if they
# want to manually edit it afterwards.
function writeChangelog {

    # start version headline in tmp release message
    echo "## ${VERSIONTAG}" >_tmp-release-message.md
    cat _tmp-release-note.txt >>_tmp-release-message.md
    echo -e "\n" >>_tmp-release-message.md

    # add old changelog data
    cat CHANGELOG.md >>_tmp-release-message.md

    # overwrite changelog
    mv _tmp-release-message.md CHANGELOG.md

    # tell user our success
    echo -e "\n⮕ ${green}Successfully added changelog entry for:${normal} $VERSIONTAG."
}

function createChangelogFromLog {
    # use full git log as reference if no version exist
    if [ "$LASTVERSION" = 'false' ]; then
        git log --pretty=format:"- %s" "$BRANCHFROM" >_tmp-release-note.txt

    # use latest annotated tag as reference if it exists
    else
        # save log output to tmp release note
        git log --pretty=format:"- %s" "$LASTVERSION"..."$BRANCHFROM" >_tmp-release-note.txt
    fi

    echo "Content:"
    cat _tmp-release-note.txt
}

# Automatically prepends an entry in the CHANGELOG.md
# file based on the commit messages between the last release tag.
# Will prompt the user if they want to autocreate the
# entry and if they want to manually edit it afterwards.
function writeChangelogAlternate {
    VERSION="$1"
    DATE=$(date +%Y-%m-%d)
    HEADLINE="# ${VERSION} - ${DATE}"

    echo -e "\n${yellow}⮕${normal} Update CHANGELOG.md for $VERSION"

    if [[ -n $COMMITURL ]]; then
        COMMITLINK=${COMMITURL/"{commit}"/"%H"}
        COMMITLINK="([%h]($COMMITLINK))"
    else
        COMMITLINK="(%h)"
    fi

    echo "last version: $LASTVERSION"

    # extract commits from log into tmp var
    LOG_FIXED=$(git log --grep='^\[\bfix\b\]' --pretty=format:"- %s $COMMITLINK" "$LASTVERSION".."$BRANCHFROM")
    LOG_CHANGED=$(git log --grep='^\[\bchange\b\]' --pretty=format:"- %s $COMMITLINK" "$LASTVERSION".."$BRANCHFROM")
    LOG_ADDED=$(git log --grep='^\[\badd\b\]' --pretty=format:"- %s $COMMITLINK" "$LASTVERSION".."$BRANCHFROM")
    LOG_BREAKS=$(git log --grep='^\[\bbreak\b\]' --pretty=format:"- %s $COMMITLINK" "$LASTVERSION".."$BRANCHFROM")
    LOG_MISC=$(git log --pretty=format:"- %s $COMMITLINK" "$LASTVERSION".."$BRANCHFROM" | grep -v "\[change\|\[fix\|\[add\|\[break")

    # use url to branch comparison between old and new release
    if [[ -n $COMPAREURL ]]; then
        COMPAREURL=${COMPAREURL/"{old}"/$LASTVERSION}
        COMPAREURL=${COMPAREURL/"{new}"/$VERSIONPREFIX$VERSION}
        HEADLINE="# [${VERSION}](${COMPAREURL}) - ${DATE}"
    fi

    # start default changelog block
    TMPCONTENT="$HEADLINE"
    if [ -n "$LOG_BREAKS" ]; then
        LOG_BREAKS="${LOG_BREAKS//\[break\]/''}"
        TMPCONTENT+="\n\n### Breaking changes\n\n$LOG_BREAKS"
    fi
    if [ -n "$LOG_FIXED" ]; then
        LOG_FIXED="${LOG_FIXED//\[fix\]/''}"
        TMPCONTENT+="\n\n### Fixed\n\n$LOG_FIXED"
    fi
    if [ -n "$LOG_ADDED" ]; then
        LOG_ADDED="${LOG_ADDED//\[add\]/''}"
        TMPCONTENT+="\n\n### Added\n\n$LOG_ADDED"
    fi
    if [ -n "$LOG_CHANGED" ]; then
        LOG_CHANGED="${LOG_CHANGED//\[change\]/''}"
        TMPCONTENT+="\n\n### Changed\n\n$LOG_CHANGED"
    fi

    TMPCONTENT+="\n\n### Misc\n\n$LOG_MISC"

    # put content into tmp changelog
    echo -e "$TMPCONTENT" >$TMPRELEASEMSG

    # add a new line
    echo -e "\n---\n" >>$TMPRELEASEMSG

    # attach old changelog content if it exists
    if [ -f CHANGELOG.md ]; then
        cat CHANGELOG.md >>$TMPRELEASEMSG
    fi

    # overwrite original changelog file
    # and delete tmp files
    mv $TMPRELEASEMSG CHANGELOG.md
}

# =================================
# CHECKS
# =================================
# abort if working directory is dirty
if [ "$WORKINGDIRDIRTY" ] && [ "$STRATEGY" == "default" ]; then
    echo -e "\nERR: Your working directory is dirty!\n"
    git status
    exit 1
fi

# make sure the branches are up to date
if git checkout "$BRANCHFROM" &>/dev/null &&
    [ $HASREMOTE == 1 ] &&
    [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then

    echo -e "\n⮕ ${red}ERR: HEAD and origin/HEAD are deviated!${normal}"
    echo -e "Make sure you merged/pulled new commits."
    echo ""
    git status
    exit 1
fi

# abort if version tag already exists
if [ "$(git tag -l "$VERSIONTAG")" ]; then
    echo -e "\n⮕ ${red}ERR: Version already exists!${normal}\n"
    git show "$VERSIONTAG"
    exit 1
fi

# =================================
# EXECUTION
# =================================
case "$CMD" in

create)
    createRelease
    exit
    ;;

publish)
    if [ "$STRATEGY" == 'alternate' ]; then
        echo "Publish does not work with 'alternate' strategy, because it will be published during 'git release f'."
    else
        publishRelease
    fi
    exit
    ;;

finish)
    if [ "$STRATEGY" == 'alternate' ]; then
        finishReleaseAlternate
    else
        finishRelease
    fi

    exit
    ;;

esac
