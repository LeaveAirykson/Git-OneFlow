#!/bin/bash
#
# Usage: git release start <version> [commit]
# Usage: git release finish <version>

# subcommand of git release
CMD=${1:-start}

# get the settings from git config
BRANCHPREFIX=$(git config --get oneflow.prefix.release)
BRANCHFROM=$(git config --get oneflow.branch.next)
BRANCHRELEASE=$(git config --get oneflow.branch.main)
VERSIONPREFIX=$(git config --get oneflow.prefix.version)

# build final versiontag name and branch name
VERSIONTAG=${VERSIONPREFIX}$2
BRANCH="${BRANCHPREFIX}${VERSIONTAG}"

# tests for a clean state
WORKINGDIRDIRTY=$(git status --porcelain)
BRANCHEXISTS=$(git rev-parse --quiet --verify "$BRANCH")

# third parameter in release start <version> [commit]
# is used as a reference to branch off from.
BRANCHFROM=${3:-$BRANCHFROM}

# merges release branch into develop and creates
# fast forward merge into master to create release tag.
function createRelease {

    # change to the release/v***
    git checkout "$BRANCH"

    # write a changelog if wanted
    read -p -r "Autocreate CHANGELOG.md entry (Y/n)? " autocreateChangelog

    if [ "$autocreateChangelog" == "Y" ]; then
        writeChangelog
    fi

    read -p -r "Do you want to edit CHANGELOG.md (Y/n)? " openChangelog

    if [ "$openChangelog" == "Y" ]; then
        $EDITOR CHANGELOG.md
    fi

    git tag -a "$VERSIONTAG" -m "Create release $VERSIONTAG"
    git checkout "$BRANCHFROM"
    git merge "$BRANCH"
    git push --tags origin "$BRANCHFROM"
    git branch -d "$BRANCH"
    git checkout "$BRANCHRELEASE"
    git merge --ff-only "$VERSIONTAG"

    echo -e "\nRelease $VERSIONTAG successfully created!\n"
}

function writeChangelog {
    LASTVERSION=$(git describe --abbrev=0);

    # save log output to tmp release note
    git log --no-merges --pretty=format:"- %s" "$LASTVERSION"...HEAD > _tmp-release-note.txt;

    # start version headline in tmp release message
    echo "## ${VERSIONTAG}" > _tmp-release-message.md;
    cat _tmp-release-note.txt >> _tmp-release-message.md;
    echo -e "\n" >> _tmp-release-message.md;

    # add old changelog data
    cat CHANGELOG.md >> _tmp-release-message.md;

    # overwrite changelog
    mv _tmp-release-message.md CHANGELOG.md;

    # commit changelog
    git add CHANGELOG.md && git commit -m "Update CHANGELOG for ${VERSIONTAG}";

    # remove tmp note
    rm _tmp-release-note.txt
}

# Help function showing usage of the command
usage() {
    echo -e "Usage:\n\tgit release start <version> [commit]"
    echo -e "\tgit release finish <version>"
}

# abort if the <version> is missing and show the help
if [ -z "$2" ] ; then
    echo "<version> parameter is missing!"
    usage
    exit 0
fi

# abort if working directory is dirty
if [ "$WORKINGDIRDIRTY" ] ; then
    echo "Your working directory is dirty!"
    git status
    exit 0
fi

# the main logic handler.
case "$CMD" in
    start)
        if [ "$BRANCHEXISTS" ] ; then
            echo "Branch $BRANCH already exists!"
            exit 0

        else
            git checkout -b "$BRANCH" "$BRANCHFROM"
        fi
        exit
        ;;

    finish)
        createRelease
        exit
        ;;

    *)
        usage
        exit
        ;;

esac