#!/bin/bash
# shellcheck disable=SC2063,SC2129,SC2181,SC2162
# Usage:
# git feature create|c [name]
# git feature finish|f [name]
# git feature publish|p [name]
# Colors
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
normal="\033[0m"

# Set default subcommand
CMD=${1:-create}

# make sure the aliases trigger the right
# subcommand
case "$CMD" in
c | create)
    CMD='create'
    ;;
p | publish)
    CMD='publish'
    ;;
f | finish)
    CMD='finish'
    ;;
esac

# get the settings from git config
BRANCHPREFIX=$(git config --get nextflow.prefix.feature)
BRANCHFROM=$(git config --get nextflow.branch.next)
BRANCHRELEASE=$(git config --get nextflow.branch.main)
STRATEGY=$(git config --get nextflow.general.strategy)
FEATURENAME=$2
BRANCH="${BRANCHPREFIX}$FEATURENAME"

# make sure the 'next' branch exists
# use the 'main' branch as a fallback
if ! git rev-parse --quiet --verify "$BRANCHFROM" &>/dev/null; then
    BRANCHFROM=$BRANCHRELEASE
fi

# tests for a clean state
WORKINGDIRDIRTY=$(git status --porcelain)
BRANCHEXISTS=$(git rev-parse --quiet --verify "$BRANCH")
CURRENTBRANCH=$(git branch | grep \* | cut -d ' ' -f2)

# Help function showing usage of the command
usage() {
    echo -e "Usage:\ngit feature create|c [name]"
    echo -e "git feature publish|p [name]"
    echo -e "git feature finish|f [name]\n"
}

# merges feature branch into develop.
function finishFeature {

    # assume current branch is a feature/ branch
    #  if no feature name is given
    if [ -z "$FEATURENAME" ]; then

        # use current branch as the target
        BRANCH=$CURRENTBRANCH

        # extract feature name from feature/[name] branch
        FEATURENAME=${BRANCH/"$BRANCHPREFIX"/''}

        # Make sure the branch starts with the feature/ prefix
        # otherwise abort and force manual usage over [name] parameter.
        if [[ ! "$BRANCH" =~ $BRANCHPREFIX ]]; then
            echo -e "\nERR: Couldn't find the right feature branch.\n"
            echo -e "Please give either a name like this:"
            echo -e "=> git feature finish topnav-menu-fixes"
            echo -e "or checkout the branch you want to finish.\n"
            usage
            exit 1
        fi
    fi

    echo ""

    # The setting "nextflow.general.strategy" controls how
    # additional branches are merged into the 'next' and 'main' branch.
    case $STRATEGY in
    alternate)
        # merge without fast-forward into 'next' branch
        git checkout "$BRANCHFROM"
        git merge --squash "$BRANCH"
        git commit -m "Implement $BRANCH"
        # tag the merge with feature name
        git tag "$BRANCH"
        # and delete its feature/* branch
        git branch -D "$BRANCH"
        ;;
    *)
        # extract commit messages for final commit bodytext
        FEATURENOTE=$(git log --pretty=format:'- %s' "$BRANCHFROM".."$BRANCH")
        # Squash merge the feature into 'next' branch
        git checkout "$BRANCHFROM"
        git merge --squash "$BRANCH"
        git commit -m "Implement feature '$FEATURENAME'" -m "${FEATURENOTE}"
        # delete the feature/* branch
        git branch -D "$BRANCH"
        ;;
    esac

    if [ $? -eq 0 ]; then
        echo -e "\n⮕ ${green}Feature $FEATURENAME successfully implemented!${normal}\n"
    else
        echo -e "\n⮕ ${red}ERR: Problems occured during implementation of feature $FEATURENAME${normal}\n"
    fi
}

# pushes the branch to remote
function publishFeature {
    git push -u origin "$BRANCH"
}

# abort if the [name] is missing and show the help
if [ -z "$2" ] && [ "$CMD" == "create" ]; then
    echo -e "\nERR: Parameter missing or command not found!\n"
    usage
    exit 1
fi

# abort if working directory is dirty
if [ "$WORKINGDIRDIRTY" ]; then
    echo -e "\n⮕ ${yellow}Warning:${normal} Your working directory is dirty!\n"
    git status
    echo -e "${yellow}"
    read -p "Proceed anyway? (Y/n) " proceedDirty
    echo -e "${normal}"

    if [ ! "$proceedDirty" == "Y" ]; then
        exit 1
    fi
fi

# the main logic handler.
case "$CMD" in
create)
    if [ "$BRANCHEXISTS" ]; then
        echo -e "\n${red}ERR: Branch $BRANCH already exists!${normal}\n"
        exit 1

    else
        git checkout -b "$BRANCH" "$BRANCHFROM"
    fi
    exit
    ;;

finish)
    finishFeature
    exit
    ;;

publish)
    publishFeature
    exit
    ;;

*)
    usage
    exit
    ;;

esac
